import pytest
from src import AES256Encryptor


@pytest.fixture
def encryptor():
    """–§–∏–∫—Å—Ç—É—Ä–∞, —Å–æ–∑–¥–∞—é—â–∞—è —ç–∫–∑–µ–º–ø–ª—è—Ä —à–∏—Ñ—Ä–æ–≤–∞–ª—å—â–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    return AES256Encryptor()


def test_padding():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è padding."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –¥–ª–∏–Ω—ã –¥–∞–Ω–Ω—ã—Ö
    test_cases = [
        b"test",  # 4 –±–∞–π—Ç–∞
        b"hello world",  # 11 –±–∞–π—Ç
        b"x" * 16,  # —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω –±–ª–æ–∫
        b"y" * 32,  # —Ä–æ–≤–Ω–æ –¥–≤–∞ –±–ª–æ–∫–∞
        b"",  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    ]

    for data in test_cases:
        padded = AES256Encryptor._pad(data)
        assert len(padded) % AES256Encryptor.BLOCK_SIZE == 0
        assert len(padded) >= len(data)
        assert AES256Encryptor._unpad(padded) == data


def test_key_derivation():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞."""
    password = "test_password"
    salt = b"0" * AES256Encryptor.SALT_SIZE

    key = AES256Encryptor._derive_key(password, salt)
    assert len(key) == AES256Encryptor.KEY_SIZE
    key2 = AES256Encryptor._derive_key(password, salt)
    assert key == key2
    key3 = AES256Encryptor._derive_key("another_pass", salt)
    assert key != key3


def test_encryption_decryption(encryptor):
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è."""
    test_cases = [
        "–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç",
        "Text with numbers 12345",
        "–¢–µ–∫—Å—Ç —Å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏ !@#$%^&*()",
        "–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π\n—Ç–µ–∫—Å—Ç\n—Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏",
        "",  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        "üåü Unicode —Å–∏–º–≤–æ–ª—ã ÊµãËØï",  # Unicode
        "a" * 1000,  # –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    ]

    password = "test_master_password"

    for text in test_cases:
        encrypted = encryptor.encrypt(password, text)
        assert encrypted != text
        decrypted = encryptor.decrypt(password, encrypted)
        assert decrypted == text


def test_corrupted_data(encryptor):
    """–¢–µ—Å—Ç –Ω–∞ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    original = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    password = "test_password"

    encrypted = encryptor.encrypt(password, original)
    corrupted = encrypted[:-10] + "x" * 10  # –ü–æ—Ä—Ç–∏–º –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏
    with pytest.raises(Exception):
        encryptor.decrypt(password, corrupted)

    with pytest.raises(Exception):
        encryptor.decrypt(password, "–Ω–µ_base64_—Å—Ç—Ä–æ–∫–∞")
